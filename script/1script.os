// #Использовать v8runner
// Конфигуратор = Новый УправлениеКонфигуратором();
// // Конфигуратор.УстановитьКонтекст("/IBConnectionString""ink-opp1c-2; Ref='mdm_konstantinov_1'""");
// Конфигуратор.

// Инициализация
// 1. инициализация репозитория и создание файлов с описанием Авторов (AUTHORS) и последней загруженной версии (VERSION)
// 2. получить таблицу версий хранилища

// Реализация
// 1. Получить последнюю выгруженную версию
// 2. выгрузить следующую версию хранилища во временный файлы
// 3. получить ответственного за версию из таблицы версий
// 4. получить почту автора из файла AUTHORS для коммита в git
// 5. создать временный каталог
// 6. загрузить конфигурацию из временного файла
// 7. выгрузить конфигурацию в файлы в каталог проекта git
// 8. выполнить commit версии
// 9. сохранить синхронизированной версии
// 10. синхронизировать с удаленным репозиторием git

#Использовать v8runner
#Использовать v8find
#Использовать v8storage
#Использовать gitsync


// Инициализация

// 1. 
//	gitsync init --storage-user Константинов --storage-pwd=1 C:\dkonst\TestGitRep "C:\dkonst\gitsync\TestGitRep"

// 2. 
// МенеджерХранилища = Новый МенеджерХранилищаКонфигурации("tcp://ink-store1c01/MDM_release");
// МенеджерХранилища.УстановитьПараметрыАвторизации("Константинов", "89025789000");
// ТабВерсий = МенеджерХранилища.ПолучитьТаблицуВерсийХранилища(1);

// Реализация

// 1. Получить последнюю выгруженную версию
КаталогРабочейКопии = "C:\dkonst\gitsync\TestGitRep";
ПутьКХранилищу = "C:\dkonst\TestGitRep";
ЮзерХранилища = "Константинов";
ПарольЮзераХранилища = "1";

// инициируем менеджер синхронизации gitsync
МенеджерСинхронизации = Новый МенеджерСинхронизации;
МенеджерСинхронизации.АвторизацияВХранилищеКонфигурации(ЮзерХранилища, ПарольЮзераХранилища);

// получить номер синхронизированной версии
ТекущаяВерсия = МенеджерСинхронизации.НомерСинхронизированнойВерсии(КаталогРабочейКопии);

// таблица истории версий хранилища, начиная со следующей версии
ТаблицаИсторииХранилища = МенеджерСинхронизации.ПрочитатьИзХранилищаИсториюКоммитовСАвторами(ПутьКХранилищу, ТекущаяВерсия + 1);
МенеджерСинхронизации.ДополнитьТаблицуХранилищаИнформациейОСигнатуреПользователяВГит(ТаблицаИсторииХранилища, КаталогРабочейКопии);

Для Каждого СтрокаВерсии Из ТаблицаИсторииХранилища Цикл

	// добавим проверку номера версии (на всякий случай)
	Если СтрокаВерсии.НомерВерсии <= ТекущаяВерсия Тогда
		Продолжить;
	КонецЕсли;

	// следующая версия
	СледующаяВерсия = СтрокаВерсии.НомерВерсии;

	// выгрузить версию хранилища во временную папку
	КаталогВыгрузки = КаталогРабочейКопии + "\" + Формат(СледующаяВерсия, "ЧГ=");
	МенеджерСинхронизации.ВыгрузитьВерсиюХранилищаКонфигурацииВИсходники(КаталогРабочейКопии, ПутьКХранилищу, СледующаяВерсия);

	// переместить из временного каталога версии в каталог синхронизации git
	МенеджерСинхронизации.ПереместитьВКаталогРабочейКопии(КаталогРабочейКопии, КаталогВыгрузки);

	// удаление временной базы
	УдалитьФайлы(КаталогВыгрузки);

	// обновить версию в файле
	МенеджерСинхронизации.ЗаписатьФайлВерсийГит(КаталогРабочейКопии, СледующаяВерсия);

	// индексировать файлы в git и выполнить коммит
	МенеджерСинхронизации.ВыполнитьКоммитГит(КаталогРабочейКопии,
											?(ПустаяСтрока(СтрокаВерсии.Комментарий), "без комментариев", СтрокаВерсии.Комментарий),
											СтрокаВерсии.ПредставлениеАвтора,
											СтрокаВерсии.Дата);

КонецЦикла